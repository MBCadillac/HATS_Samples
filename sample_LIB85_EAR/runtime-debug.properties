#
# This file saves some of the runtime settings.
# 
# Lines that start with # are comments.
# 
# The runtime uses the default value for
# any value that is not specified in this file.
# 
# This is a Java properties file.  The following keys are allowed:
# 
# numLicenses
#   Value: A decimal number between 1 and 50000.
#   Default value: 1
#   Meaning: The number of licenses that you purchased.
# 
# licenseHardLimit
#   Value: Encrypted
#   Meaning: An encrypted field containing HATS licensing entitlement.
#   Do not manually alter this field.
# 
# licenseTracking
#   Values: 0 or 1
#   Default value: 0
#   Meaning: If the value is 1, tracking of license usage is enabled.
# 
# licenseFile
#   Meaning: The actual name of the license tracking file.
#   Any backslashes (\) should be doubled (\\).
# 
# adminPortNum
#   Value: 1 to 65535
#   Default value: 2809
#   Meaning: The port number to be used by HATS Administration for the default administrative scope.
#   This value must be an active WebSphere BOOTSTRAP_ADDRESS port on the local host.
# 
# maxTraceFiles 
#   Value: a decimal integer
#   Default value: 5
#   Meaning: The maximum number of trace information files.
# 
#   The base trace file name is used as a template to
#   generate unique sets of trace files for each application server.
# 
#   An index is added to this name (1, 2, etc.) to distinguish multiple trace files.
# 
#   When using multiple trace files, when a trace file reaches maxTraceFileSize,
#   it is closed and renamed to trace2.txt.  A new trace1.txt is opened.
# 
#   When the maxTraceFiles number is exceeded, the oldest file is deleted.
# 
# maxTraceFileSize
#   Value: a decimal integer
#   Default value: 10240
#   Meaning: The maximum KB size that a trace file reaches before
#   an additional trace file is opened.
# 
# traceFile
#   Meaning: The name used as a TEMPLATE, to generate names for per application server files to which
#   trace messages are written. See the comment on the maxTraceFiles property, for a description
#   of the trace file name generation algorithm.
#   Any backslashes (\) should be doubled (\\).
# 
# traceLogDirectory
#   Meaning: Sets the directory to be used for writing log and trace output when this EAR is
#   deployed.   If this keyword is not specified, or the value specified is not valid, the
#   directory used is "logs", and placed under the EAR's installed directory.   This value
#   is only used when the EAR is deployed to an application server.  It has no effect within
#   the Studio environment.
# 
#   Format:  Multiple values can be specified separated by commas (,), and the first specified
#   directory on the target machine which exists and can be written to is used, and the rest are
#   ignored.  This feature can be used to specify alternate output paths for different operating
#   systems to which the application may be deployed.   Keywords are read using the
#   java.util.Properties.load() method, and so the ASCII characters backslash (\), #, !, =, and : 
#   are specified with a preceding backslash to ensure that they are properly loaded.
#   Example: backslashes (\) in the path should be doubled (\\).   Also, characters
#   less than \u0020 and characters greater than \u007E are written as \uxxxx for the hexadecimal
#   value xxxx.
#       Example:   traceLogDirectory=d\:\\logs
# 
# maxLogFiles 
#   Value: a decimal integer
#   Default value: 2
#   Meaning: The maximum number of message files.
# 
#   The algorithm for generating message file names is the same as that
#   used for the trace files (see above).
# 
# maxLogFileSize 
#   Value: a decimal integer
#   Default value: 512
#   Meaning:  The maximum KB size that a message log file
#   reaches before an additional log file is opened.
# 
# logFile
#   Meaning: The name used as a TEMPLATE, to generate names for per application server files to which
#   log messages are written. See the comment on the maxLogFiles property, for a description
#   of the log file name generation algorithm.
#   Any backslashes (\) should be doubled (\\).
# 
# ioPatternKey
#   Meaning: Patterns used to identify Integration Objects to be traced.  Multiple patterns may be specified.
#   If multiple patterns are specified, they should be delimited by a comma (,).  Each pattern may contain
#   one more wildcards (*).  Specify a pattern of IntegrationObject.* in order to trace all Integration Objects.
#   Specific Integation Objects may be traced by providing a more specific pattern such as IntegrationObject.Callup*.
# 
# ----------------------------------------------------
# tracing options
# 
# trace.RUNTIME
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for the main runtime
#            and for all settings under RUNTIME.* that do not
#            specify a trace level.
#   See the meaning of the tracelevel.* keys.
# 
# trace.TRANSFORM
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for HATS transformations
#            and for all settings under TRANSFORM.* that do not
#            specify a trace level.
#   See the meaning of the tracelevel.* keys.
# 
# trace.TRANSFORM.WIDGET
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for the widgets.
#   See the meaning of the tracelevel.* keys.
# 
# trace.RUNTIME.ACTION
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for, and overrides
#            the setting of trace.RUNTIME, for the event actions.
#   See the meaning of the tracelevel.* keys.
# 
# trace.TRANSFORM.COMPONENT
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for the components.
#   See the meaning of the tracelevel.* keys.
# 
# trace.UTIL
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for the runtime utilities.
#   See the meaning of the tracelevel.* keys.
# 
# trace.INTEGRATIONOBJECT
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for Integration Objects.
#   See the meaning of the tracelevel.* keys.
# 
# trace.APPLET
#   Values: 0 to 9
#   Default value: 0
#   Meaning: Specifies the level of tracing for server side applet runtime
#   See the meaning of the tracelevel.* keys.
# 
# tracelevel.1
# tracelevel.2
# tracelevel.3
# tracelevel.4
# tracelevel.5
# tracelevel.6
# tracelevel.7
# tracelevel.8
# tracelevel.9
#   Values: a hexadecimal digit string
#   Default values:
#     tracelevel.1 : 0000000000020000
#     tracelevel.2 : 000000000000020f
#     tracelevel.3 : 000000000004023f  (minimum)
#     tracelevel.4 : 0000000000041a3f
#     tracelevel.5 : 00000000000c1bbf  (normal)
#     tracelevel.6 : 00000000000c1bbf
#     tracelevel.7 : 00000000001c1bbf  (maximum)
#     tracelevel.8 : 00000000001c1bbf
#     tracelevel.9 : 00000000001c1bbf
#   Meaning: Each of the tracelevel keys specifies as its value
#      a hexadecimal digit string.  This string is a mask which is applied
#      to the tracing feature for components which use that trace level.
#      Each bit of the digit string controls one type of tracing for
#      the runtime.
# 
#      The masks are not used for Host On-Demand tracing.
# 
#      To customize the trace masks, add together the following (hex) values:
#      x000001  - Informational messages
#      x000002  - Warning messages
#      x000004  - Error messages
#      x000008  - Critical error messages
#      x000010  - API traces
#      x000020  - Callback API traces
#      x000080  - Method entry
#      x000100  - Method exit
#      x000200  - Exceptions
#      x000400  - Miscellaneous traces
#      x000800  - Object creation
#      x001000  - Object disposal
#      x020000  - performance tracing - use this value alone
#      x040000  - Miscellaneous data - level 1
#      x080000  - Miscellaneous data - level 2
#      x100000  - Miscellaneous data - level 3
# 
# ----------------------------------------------------
# Host On-Demand tracing
# 
# NOTE: You should not enable the Host On-Demand traces
#  unless requested by IBM Support.
# 
# trace.HOD.PS
#   Values: 0 to 3
#   Default value: 0
#   Meaning: Specifies the level of Host-On-Demand presentation space tracing.
# 
# trace.HOD.DS
#   Values: 0 to 3
#   Default value: 0
#   Meaning: Specifies the level of Host-On-Demand data stream tracing.
# 
# trace.HOD.TRANSPORT
#   Values: 0 to 3
#   Default value: 0
#   Meaning: Specifies the level of Host-On-Demand transport tracing.
# 
# trace.HOD.MACRO
#   Values: 0 to 2
#   Default value: 0
#   Meaning: Specifies the level of tracing for Host-On-Demand macros.
#   If the value is 1, Host On-Demand Macro event tracing is enabled. 
#   If the value is 2, Host On-Demand Macro support tracing is enabled.
# 
# trace.HOD.USERMACRO
#   Values: 0 to 3
#   Default value: 0
#   Meaning: Specifies the level of tracing for trace actions in
#            Host-On-Demand macros.
# 
# trace.HOD.SESSION
#   Values: 0 to 3
#   Default value: 0
#   Meaning: Specifies the level of Host-On-Demand session tracing.
# 
# trace.HOD.PSEVENT
#   Values: 0 to 1
#   Default value: 0
#   Meaning: Specifies the level of tracing for Host On-Demand PS events.
# 
# trace.HOD.OIAEVENT
#   Values: 0 to 1
#   Default value: 0
#   Meaning: Specifies the level of tracing for Host On-Demand OIA events.
# 
# trace.HOD.COMMEVENT
#   Values: 0 to 1
#   Default value: 0
#   Meaning: Specifies the level of tracing for Host On-Demand COMM events.
# 
# trace.HOD.DISPLAYTERMINAL
#   Values: 0 to 1
#   Default value: 0
#   Meaning: If the value is 1, Host On-Demand displays a terminal 
#   window for each session.
# 
#
#
#Thu Sep 10 15:36:20 EDT 2020
ioPatternKey=IntegrationObject.*
licenseHardLimit=pvEpkVCiPj4RLrxA2v8\=
trace.HOD.MACRO=0
maxTraceFiles=5
licenseFile=license.txt
trace.HOD.DS=0
trace.HOD.PSEVENT=0
trace.HOD.PS=0
trace.HOD.USERMACRO=0
numLicenses=2
traceFile=trace.txt
licenseType=USER
maxTraceFileSize=10240
trace.HOD.OIAEVENT=0
logMask=7
trace.HOD.TRANSPORT=0
maxLogFiles=2
adminPortNum=2809
trace.HOD.SESSION=0
logFile=messages.txt
trace.HOD.DISPLAYTERMINAL=1
recordSimulationTrace=0
maxLogFileSize=512
licenseTracking=0
trace.HOD.COMMEVENT=0
